const CreepBase = require('./CreepBase');

class Builder extends CreepBase {

     checkAndRefillEnergy() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —ç–Ω–µ—Ä–≥–∏—è
        if (this.creep.store.getUsedCapacity(RESOURCE_ENERGY) === 0) {
            this.memory.working = false; // –§–ª–∞–≥, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é
            this.creep.say?.('üîÑ Need NRG');
            this.setState(CreepBase.STATE_IDLE); // –ò–¥–µ–º –≤ idle –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            return false; // –≠–Ω–µ—Ä–≥–∏–∏ –Ω–µ—Ç
        }
        // –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –µ—Å—Ç—å, –∏ –º—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
        if (!this.memory.working && this.creep.store.getFreeCapacity(RESOURCE_ENERGY) === 0) {
             this.memory.working = true;
             delete this.memory.sourceTarget; // –ó–∞–±—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏
             this.setState(CreepBase.STATE_IDLE); // –ò–¥–µ–º –≤ idle –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–π–∫–∏
        }
        return this.memory.working; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã (—Å—Ç—Ä–æ–∏–º –∏–ª–∏ –∏—â–µ–º —ç–Ω–µ—Ä–≥–∏—é)
    }


    handleIdleState() {
         if (!this.checkAndRefillEnergy()) {
             // –ù—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é
             // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
             const energySource = this.findEnergySource();
             if (energySource) {
                 this.memory.sourceTarget = energySource.id;
                 this.memory.target = energySource.id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º target –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
                 this.setState(CreepBase.STATE_MOVING);
                 this.handleMovingState(); // –ù–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É
             } else {
                 this.creep.say?.('‚ùì No NRG src');
             }
             return; // –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. –∏—â–µ–º —ç–Ω–µ—Ä–≥–∏—é
         }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è (working = true), –∏—â–µ–º —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫—É
        const constructionSite = this.findClosestTarget(FIND_CONSTRUCTION_SITES);
        if (constructionSite) {
            console.log(`Builder ${this.creep.name}: Found site ${constructionSite.id} at ${constructionSite.pos}`);
            this.memory.target = constructionSite.id;
            this.setState(CreepBase.STATE_MOVING);
            this.handleMovingState(); // –ù–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        } else {
             this.creep.say?.('üöß No sites');

        }
    }

    handleWorkingState() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π
         if (!this.checkAndRefillEnergy()) {
             // –≠–Ω–µ—Ä–≥–∏—è –∫–æ–Ω—á–∏–ª–∞—Å—å –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã/–¥–≤–∏–∂–µ–Ω–∏—è
             return;
         }

        const targetId = this.memory.target;
         if (!targetId) {
            this.setState(CreepBase.STATE_IDLE);
            return;
        }

        const target = this.gameState.game.getObjectById(targetId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ (–µ—Å–ª–∏ –º—ã –∑–∞–±–∏—Ä–∞–ª–∏ —ç–Ω–µ—Ä–≥–∏—é)
        if (!target) {
             console.log(`Builder ${this.creep.name}: Target ${targetId} not found. Going idle.`);
            delete this.memory.target;
            delete this.memory.sourceTarget;
            this.setState(CreepBase.STATE_IDLE);
            return;
        }

        if (target.progress !== undefined) { // –≠—Ç–æ —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–∞
            const buildResult = this.creep.build(target);
            if (buildResult === ERR_NOT_IN_RANGE) {
                this.setState(CreepBase.STATE_MOVING);
                 this.handleMovingState(); // –î–≤–∏–≥–∞–µ–º—Å—è –∫ —Å—Ç—Ä–æ–π–∫–µ
            } else if (buildResult === OK) {
                this.creep.say?.('üî® Build!');
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
            } else if (buildResult === ERR_NOT_ENOUGH_RESOURCES) {
                this.memory.working = false; // –ö–æ–Ω—á–∏–ª–∞—Å—å —ç–Ω–µ—Ä–≥–∏—è
                this.setState(CreepBase.STATE_IDLE); // –ò—â–µ–º –Ω–æ–≤—É—é
            } else {
                console.log(`Builder ${this.creep.name}: Build failed with code ${buildResult}`);
                this.setState(CreepBase.STATE_IDLE);
            }
        } else if (target.energy !== undefined || target.store !== undefined) { // –≠—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ (source, container, storage)
             const withdrawResult = this.creep.withdraw(target, RESOURCE_ENERGY);
             if (withdrawResult === ERR_NOT_IN_RANGE) {
                 this.setState(CreepBase.STATE_MOVING);
                 this.handleMovingState(); // –î–≤–∏–≥–∞–µ–º—Å—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É
             } else if (withdrawResult === OK || withdrawResult === ERR_FULL) {
                 // –í–∑—è–ª–∏ —ç–Ω–µ—Ä–≥–∏—é –∏–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–µ
                 this.memory.working = true; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É
                 delete this.memory.sourceTarget;
                 delete this.memory.target;
                 this.setState(CreepBase.STATE_IDLE); // –ò—â–µ–º —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫—É
             } else if (withdrawResult === ERR_NOT_ENOUGH_RESOURCES) {
                 // –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—É—Å—Ç, –∏—â–µ–º –¥—Ä—É–≥–æ–π
                 delete this.memory.sourceTarget;
                 delete this.memory.target;
                 this.setState(CreepBase.STATE_IDLE);
             } else {
                 console.log(`Builder ${this.creep.name}: Withdraw failed with code ${withdrawResult}`);
                 this.setState(CreepBase.STATE_IDLE);
             }
        } else {
            // –¶–µ–ª—å –Ω–µ —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–∞ –∏ –Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏? –°—Ç—Ä–∞–Ω–Ω–æ.
            console.log(`Builder ${this.creep.name}: Invalid target type for working state: ${targetId}`);
             delete this.memory.target;
            delete this.memory.sourceTarget;
            this.setState(CreepBase.STATE_IDLE);
        }
    }

     // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏
    findEnergySource() {
        // –ü—Ä–∏–º–µ—Ä: –∏—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —ç–Ω–µ—Ä–≥–∏–µ–π
        let source = this.findClosestTarget(FIND_STRUCTURES, {
            filter: (s) => (s.structureType === STRUCTURE_CONTAINER || s.structureType === STRUCTURE_STORAGE) &&
                           s.store.getUsedCapacity(RESOURCE_ENERGY) > 50 // –ò—â–µ–º –Ω–µ –ø—É—Å—Ç—ã–µ
        });

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–Ω–æ —ç—Ç–æ –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è)
        // if (!source) {
        //     source = this.findClosestTarget(FIND_SOURCES_ACTIVE);
        // }
        if (source) {
             console.log(`Builder ${this.creep.name}: Found energy source ${source.id} at ${source.pos}`);
        }
        return source;
    }

    // handleMovingState –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ CreepBase
}

module.exports = Builder;