class CreepBase {
    /**
     * @param {Creep | object} creep –†–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫—Ä–∏–ø–∞.
     * @param {GameStateManager} gameStateManager –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã.
     */
    constructor(creep, gameStateManager) {
        this.creep = creep;
        this.gameState = gameStateManager;
        this.memory = this.creep.memory;
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏—è (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    static STATE_IDLE = 'idle';
    static STATE_MOVING = 'moving';
    static STATE_WORKING = 'working';
    static STATE_RENEWING = 'renewing'; // –î–æ–±–∞–≤–∏–º —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    static STATE_DYING = 'dying';

    // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    setState(newState) {
        this.memory.state = newState; // –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ this.memory
        // –í —Ä–µ–∂–∏–º–µ –¥–µ–±–∞–≥–∞ creep.say –≤—ã–≤–µ–¥–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —á–µ—Ä–µ–∑ –∑–∞–≥–ª—É—à–∫—É –≤ GameStateManager
        switch(newState) {
             case CreepBase.STATE_IDLE:
                this.creep.say?.('üí§ idle'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º ?. –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ say –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–∏–º—É–ª—è—Ü–∏–∏
                break;
            case CreepBase.STATE_MOVING:
                this.creep.say?.('üö∂ moving');
                break;
            case CreepBase.STATE_WORKING:
                this.creep.say?.('‚ö° working');
                break;
            case CreepBase.STATE_RENEWING:
                this.creep.say?.('üîÑ renewing');
                break;
            case CreepBase.STATE_DYING:
                this.creep.say?.('üíÄ dying');
                break;
        }
    }

    handleState() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –∫—Ä–∏–ø
        if (!this.creep || (!this.gameState.getCreeps()[this.creep.name] && !this.gameState.isDebugging)) {
            console.log(`Creep ${this.creep?.name || 'unknown'} not found, skipping state handling.`);
            return;
        }

        if (!this.memory.state) {
            this.memory.state = CreepBase.STATE_IDLE;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–º–µ—Ä—Ç–∏
        if (this.creep.ticksToLive < 50 && this.memory.state !== CreepBase.STATE_DYING && this.memory.state !== CreepBase.STATE_RENEWING) {
             this.setState(CreepBase.STATE_DYING);
        } else if (this.memory.needsRenew && this.creep.ticksToLive < 1400 && this.memory.state !== CreepBase.STATE_RENEWING) {
             this.setState(CreepBase.STATE_RENEWING);
        }

        switch (this.memory.state) {
            case CreepBase.STATE_IDLE:
                this.handleIdleState();
                break;
            case CreepBase.STATE_MOVING:
                this.handleMovingState();
                break;
            case CreepBase.STATE_WORKING:
                this.handleWorkingState();
                break;
            case CreepBase.STATE_RENEWING:
                this.handleRenewingState();
                break;
            case CreepBase.STATE_DYING:
                this.handleDyingState();
                break;
            default:
                this.setState(CreepBase.STATE_IDLE);
        }
    }

    // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
    handleIdleState() {
        console.log(`WARN: Method handleIdleState not implemented for ${this.creep.name} (${this.memory.role})`);
        // throw new Error('Method handleIdleState must be implemented');
    }

    handleMovingState() {
        const targetId = this.memory.target;
        if (!targetId) {
            this.setState(CreepBase.STATE_IDLE);
            return;
        }

        const target = this.gameState.game.getObjectById(targetId);
        if (!target) {
            console.log(`Creep ${this.creep.name}: Target ${targetId} not found. Going idle.`);
            delete this.memory.target;
            this.setState(CreepBase.STATE_IDLE);
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π isNearTo —á–µ—Ä–µ–∑ creep.pos
        if (this.creep.pos.isNearTo(target.pos)) {
            // –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–±–æ—Ç–µ
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Ç—å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –ø–∞–º—è—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            delete this.memory._move;
            this.setState(CreepBase.STATE_WORKING);
            // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Ç–∏–∫
            this.handleWorkingState();
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π moveTo
            const moveResult = this.creep.moveTo(target, { visualizePathStyle: { stroke: '#ffaa00' } });
            if (moveResult === ERR_NO_PATH) {
                // –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —Ü–µ–ª—å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
                 console.log(`Creep ${this.creep.name}: No path to target ${targetId}. Going idle.`);
                delete this.memory.target;
                this.setState(CreepBase.STATE_IDLE);
            } else if (moveResult !== OK && moveResult !== ERR_TIRED) {
                 // –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
                 console.log(`Creep ${this.creep.name}: moveTo returned ${moveResult}`);
            }
        }
    }

    handleWorkingState() {
         console.log(`WARN: Method handleWorkingState not implemented for ${this.creep.name} (${this.memory.role})`);
        // throw new Error('Method handleWorkingState must be implemented');
    }

     handleRenewingState() {
        const spawn = this.gameState.getSpawn('Spawn1'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (spawn) {
            const renewResult = spawn.renewCreep(this.creep);
            if (renewResult === ERR_NOT_IN_RANGE) {
                this.creep.moveTo(spawn); // –î–≤–∏–≥–∞–µ–º—Å—è –∫ —Å–ø–∞–≤–Ω—É
            } else if (renewResult === OK) {
                // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º—Å—è
                if (this.creep.ticksToLive >= 1450) { // –£—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    delete this.memory.needsRenew;
                    this.setState(CreepBase.STATE_IDLE); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ
                }
            } else if (renewResult === ERR_FULL) {
                 // –£–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
                 delete this.memory.needsRenew;
                 this.setState(CreepBase.STATE_IDLE);
            } else if (renewResult !== ERR_BUSY) {
                 // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ —É —Å–ø–∞–≤–Ω–∞)
                 console.log(`Creep ${this.creep.name}: Renew failed with code ${renewResult}. Waiting.`);
                 // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ idle
                 this.setState(CreepBase.STATE_IDLE); // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤ idle
            }
        } else {
            console.log(`Creep ${this.creep.name}: Cannot renew, Spawn1 not found.`);
            this.setState(CreepBase.STATE_IDLE); // –ù–µ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å—Å—è, –∏–¥–µ–º –≤ idle
        }
    }

    handleDyingState() {
        // –í —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—Ä–∏–ø –º–æ–∂–µ—Ç –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–¥ —Å–º–µ—Ä—Ç—å—é
        // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–æ–π—Ç–∏ –¥–æ —Å–ø–∞–≤–Ω–∞/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å.
        // –°–µ–π—á–∞—Å - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ—Ç —Å–º–µ—Ä—Ç–∏ –∏–ª–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å—Å—è, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.

        if (this.creep.ticksToLive > 100) { // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?)
            this.setState(CreepBase.STATE_IDLE);
            return;
        }

        console.log(`Creep ${this.creep.name} is dying (${this.creep.ticksToLive} TTL). No specific action implemented.`);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–±—Ä–æ—Å–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä/—Å–ø–∞–≤–Ω

        // –ü—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DYING –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞,
        // –Ω–æ –µ—Å–ª–∏ —Ç–∞–∫–∞—è –ª–æ–≥–∏–∫–∞ –Ω—É–∂–Ω–∞, –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
        /*
        const spawn = this.gameState.getSpawn('Spawn1');
        if (spawn && spawn.pos.isNearTo(this.creep.pos)) {
             spawn.renewCreep(this.creep); // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è, –µ—Å–ª–∏ —Ä—è–¥–æ–º
        } else if (spawn) {
            this.creep.moveTo(spawn); // –ò–ª–∏ –∏–¥–µ–º –∫ —Å–ø–∞–≤–Ω—É
        }
        */
         // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä–∏–ø –ø—Ä–æ—Å—Ç–æ –¥–æ–∂–∏–≤–∞–µ—Ç —Å–≤–æ–∏ —Ç–∏–∫–∏.
         // –ü–∞–º—è—Ç—å –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞ –≤ main.js –ø–æ—Å–ª–µ –µ–≥–æ —Å–º–µ—Ä—Ç–∏.
    }

     // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ –∫—Ä–∏–ø–∞
    findClosestTarget(findType, opts) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º findClosestByRange –∏–∑ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ pos
        return this.creep.pos.findClosestByRange(findType, opts);
    }
}

module.exports = CreepBase;