/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫—Ä–∏–ø–æ–≤.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω State –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –∫—Ä–∏–ø–∞.
 * 
 * @class CreepBase
 * @description –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –≤—Å–µ —Ç–∏–ø—ã –∫—Ä–∏–ø–æ–≤.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω State –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã.
 */
class CreepBase {
    /**
     * @param {Creep | object} creep –†–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫—Ä–∏–ø–∞.
     * @param {GameStateManager} gameStateManager –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã.
     */
    constructor(creep, gameStateManager) {
        this.creep = creep;
        this.gameState = gameStateManager;
        this.memory = this.creep.memory;
    }

    /**
     * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫—Ä–∏–ø–∞.
     * @enum {string}
     * @readonly
     */
    static STATES = {
        /** –ö—Ä–∏–ø –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è */
        STATE_IDLE: 'idle',
        /** –ö—Ä–∏–ø –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏ */
        STATE_MOVING: 'moving',
        /** –ö—Ä–∏–ø –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Å–±–æ—Ä, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ç.–¥.) */
        STATE_WORKING: 'working',
        /** –ö—Ä–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –±–∞–∑—É */
        STATE_RETURNING: 'returning',
        /** –ö—Ä–∏–ø –∞—Ç–∞–∫—É–µ—Ç —Ü–µ–ª—å */
        STATE_ATTACKING: 'attacking',
        /** –ö—Ä–∏–ø –∑–∞—â–∏—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é */
        STATE_DEFENDING: 'defending'
    };

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–ø–∞.
     * 
     * @private
     * @description –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–∏–ø–∞.
     * –í—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
     * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω State –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º.
     */
    handleState() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –∫—Ä–∏–ø
        if (!this.creep || (!this.gameState.game.creeps[this.creep.name] && !this.gameState.isDebugging)) {
            console.log(`Creep ${this.creep?.name || 'unknown'} not found, skipping state handling.`);
            return;
        }

        if (!this.memory.state) {
            this.memory.state = CreepBase.STATES.STATE_IDLE;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–º–µ—Ä—Ç–∏
        if (this.creep.ticksToLive < 50 && this.memory.state !== CreepBase.STATES.STATE_DYING && this.memory.state !== CreepBase.STATES.STATE_RENEWING) {
             this.setState(CreepBase.STATES.STATE_DYING);
        } else if (this.memory.needsRenew && this.creep.ticksToLive < 1400 && this.memory.state !== CreepBase.STATES.STATE_RENEWING) {
             this.setState(CreepBase.STATES.STATE_RENEWING);
        }

        switch (this.memory.state) {
            case CreepBase.STATES.STATE_IDLE:
                this._handleIdleState();
                break;
            case CreepBase.STATES.STATE_MOVING:
                this._handleMovingState();
                break;
            case CreepBase.STATES.STATE_WORKING:
                this._handleWorkingState();
                break;
            case CreepBase.STATES.STATE_RENEWING:
                this._handleRenewingState();
                break;
            case CreepBase.STATES.STATE_DYING:
                this._handleDyingState();
                break;
            default:
                this.setState(CreepBase.STATES.STATE_IDLE);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è.
     * 
     * @private
     * @description –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫—Ä–∏–ø–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
     * –ú–æ–∂–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫—Ä–∏–ø–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ —Ä–∞–±–æ—Ç—ã.
     */
    _handleIdleState() {
        console.log(`WARN: Method handleIdleState not implemented for ${this.creep.name} (${this.memory.role})`);
        // throw new Error('Method handleIdleState must be implemented');
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è.
     * 
     * @private
     * @param {RoomPosition} targetPos - –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @description –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ–º –∫—Ä–∏–ø–∞ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏.
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏.
     */
    _handleMovingState() {
        const targetId = this.memory.target;
        if (!targetId) {
            this.setState(CreepBase.STATES.STATE_IDLE);
            return;
        }

        const target = this.gameState.game.getObjectById(targetId);
        if (!target) {
            console.log(`Creep ${this.creep.name}: Target ${targetId} not found. Going idle.`);
            delete this.memory.target;
            this.setState(CreepBase.STATES.STATE_IDLE);
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π isNearTo —á–µ—Ä–µ–∑ creep.pos
        if (this.creep.pos.isNearTo(target.pos)) {
            // –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–±–æ—Ç–µ
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Ç—å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –ø–∞–º—è—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            delete this.memory._move;
            this.setState(CreepBase.STATES.STATE_WORKING);
            // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Ç–∏–∫
            this._handleWorkingState();
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π moveTo
            const moveResult = this.creep.moveTo(target, { visualizePathStyle: { stroke: '#ffaa00' } });
            if (moveResult === ERR_NO_PATH) {
                // –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —Ü–µ–ª—å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
                 console.log(`Creep ${this.creep.name}: No path to target ${targetId}. Going idle.`);
                delete this.memory.target;
                this.setState(CreepBase.STATES.STATE_IDLE);
            } else if (moveResult !== OK && moveResult !== ERR_TIRED) {
                 // –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
                 console.log(`Creep ${this.creep.name}: moveTo returned ${moveResult}`);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.
     * 
     * @private
     * @description –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫—Ä–∏–ø–∞ (—Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ç.–¥.).
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
     */
    _handleWorkingState() {
         console.log(`WARN: Method handleWorkingState not implemented for ${this.creep.name} (${this.memory.role})`);
        // throw new Error('Method handleWorkingState must be implemented');
    }

     /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞.
     * 
     * @private
     * @description –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫—Ä–∏–ø–∞ –Ω–∞ –±–∞–∑—É.
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –±–∞–∑—ã.
     */
    _handleReturningState() {
        // ... existing code ...
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ç–∞–∫–∏.
     * 
     * @private
     * @param {Creep|Structure} target - –¶–µ–ª—å –∞—Ç–∞–∫–∏
     * @description –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Ç–∞–∫–æ–π –∫—Ä–∏–ø–∞ –Ω–∞ —Ü–µ–ª—å.
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏.
     */
    _handleAttackingState(target) {
        // ... existing code ...
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã.
     * 
     * @private
     * @param {RoomPosition} position - –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã
     * @description –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—Ç–æ–π –∫—Ä–∏–ø–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –∞—Ç–∞–∫—É –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞–≥–æ–≤.
     */
    _handleDefendingState(position) {
        // ... existing code ...
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–ø–∞.
     * 
     * @param {string} newState - –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ CreepBase.STATES
     * @description –ò–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–ø–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø–∞–º—è—Ç—å.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã.
     */
    setState(newState) {
        this.memory.state = newState; // –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ this.memory
        // –í —Ä–µ–∂–∏–º–µ –¥–µ–±–∞–≥–∞ creep.say –≤—ã–≤–µ–¥–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —á–µ—Ä–µ–∑ –∑–∞–≥–ª—É—à–∫—É –≤ GameStateManager
        switch(newState) {
             case CreepBase.STATES.STATE_IDLE:
                this.creep.say?.('üí§ idle'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º ?. –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ say –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–∏–º—É–ª—è—Ü–∏–∏
                break;
            case CreepBase.STATES.STATE_MOVING:
                this.creep.say?.('üö∂ moving');
                break;
            case CreepBase.STATES.STATE_WORKING:
                this.creep.say?.('‚ö° working');
                break;
            case CreepBase.STATES.STATE_RENEWING:
                this.creep.say?.('üîÑ renewing');
                break;
            case CreepBase.STATES.STATE_DYING:
                this.creep.say?.('üíÄ dying');
                break;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–ø–∞.
     * 
     * @returns {string} –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–ø–∞
     * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–ø–∞ –∏–∑ –µ–≥–æ –ø–∞–º—è—Ç–∏.
     */
    getState() {
        return this.memory.state;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ –∫—Ä–∏–ø–∞
    findClosestTarget(findType, opts) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º findClosestByRange —á–µ—Ä–µ–∑ gameState.game
        return this.gameState.game.findClosestByRange(this.creep.pos, findType, opts);
    }
}

module.exports = CreepBase;