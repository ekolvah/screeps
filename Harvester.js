const CreepBase = require('./CreepBase');

class Harvester extends CreepBase {

     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–Ω–µ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–∏—é –∏–ª–∏ –º–æ–∂–Ω–æ –∫–æ–ø–∞—Ç—å
     checkAndDepositEnergy() {
        // –ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–∏–ª–∏—Å—å –∏ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
        if (!this.memory.delivering && this.creep.store.getFreeCapacity(RESOURCE_ENERGY) === 0) {
            this.memory.delivering = true;
            delete this.memory.sourceTarget; // –ó–∞–±—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            this.creep.say?.('‚ö° Deliver NRG');
            this.setState(CreepBase.STATE_IDLE); // –ò–¥–µ–º –≤ idle –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            return true; // –ù—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å
        }
         // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–ª—è–ª–∏ –∏ –æ–ø—É—Å—Ç–µ–ª–∏, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–æ–±—ã—á—É
        if (this.memory.delivering && this.creep.store.getUsedCapacity(RESOURCE_ENERGY) === 0) {
            this.memory.delivering = false;
            delete this.memory.deliveryTarget; // –ó–∞–±—ã–≤–∞–µ–º —Ü–µ–ª—å –¥–æ—Å—Ç–∞–≤–∫–∏
            this.creep.say?.('‚õèÔ∏è Harvest');
            this.setState(CreepBase.STATE_IDLE); // –ò–¥–µ–º –≤ idle –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            return false; // –ù—É–∂–Ω–æ –∫–æ–ø–∞—Ç—å
        }
         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (true - –¥–æ—Å—Ç–∞–≤–∫–∞, false - –¥–æ–±—ã—á–∞)
        return !!this.memory.delivering;
     }


    handleIdleState() {
        const delivering = this.checkAndDepositEnergy();

        if (delivering) {
             // –ò—â–µ–º –∫—É–¥–∞ –æ—Ç–Ω–µ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–∏—é
             const target = this.findDeliveryTarget();
             if (target) {
                 this.memory.deliveryTarget = target.id;
                 this.memory.target = target.id; // –¶–µ–ª—å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
                 console.log(`Harvester ${this.creep.name}: Found delivery target ${target.id} (${target.structureType || 'source/ctrl'}) at ${target.pos}`);
                 this.setState(CreepBase.STATE_MOVING);
                 this.handleMovingState();
             } else {
                 this.creep.say?.('‚ùì No deposit');
                 // –ù–µ–∫—É–¥–∞ –Ω–µ—Å—Ç–∏? –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ä—è–¥–æ–º —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏–ª–∏ –∂–¥–∞—Ç—å
                 // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—è–¥–æ–º —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º, –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ
             }
        } else {
            // –ò—â–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –¥–æ–±—ã—á–∏
            // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫, –∏–¥–µ–º –∫ –Ω–µ–º—É
             let source = this.memory.assignedSource ? this.gameState.getObjectById(this.memory.assignedSource) : null;

             if (!source) { // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ –æ–Ω –∏—Å—á–µ–∑
                source = this.findClosestTarget(FIND_SOURCES_ACTIVE);
             }

            if (source) {
                console.log(`Harvester ${this.creep.name}: Target source ${source.id} at ${source.pos}`);
                this.memory.sourceTarget = source.id;
                this.memory.target = source.id; // –¶–µ–ª—å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
                this.setState(CreepBase.STATE_MOVING);
                this.handleMovingState();
            } else {
                 this.creep.say?.('üíß No sources?');
                 // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤? –ñ–¥–µ–º.
            }
        }
    }

    handleWorkingState() {
        const delivering = this.checkAndDepositEnergy();
        const targetId = this.memory.target;

        if (!targetId) {
            this.setState(CreepBase.STATE_IDLE);
            return;
        }
        const target = this.gameState.getObjectById(targetId);
        if (!target) {
            console.log(`Harvester ${this.creep.name}: Target ${targetId} not found. Going idle.`);
            delete this.memory.target;
            delete this.memory.sourceTarget;
            delete this.memory.deliveryTarget;
            this.setState(CreepBase.STATE_IDLE);
            return;
        }

        if (delivering) {
            // –ù–µ—Å–µ–º —ç–Ω–µ—Ä–≥–∏—é
            const transferResult = this.creep.transfer(target, RESOURCE_ENERGY);
            if (transferResult === ERR_NOT_IN_RANGE) {
                this.setState(CreepBase.STATE_MOVING);
                this.handleMovingState();
            } else if (transferResult === OK) {
                // –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏
                 if (this.creep.store.getUsedCapacity(RESOURCE_ENERGY) === 0) {
                    // –û–ø—É—Å—Ç–µ–ª–∏, –∏–¥–µ–º –∫–æ–ø–∞—Ç—å
                    this.memory.delivering = false;
                    delete this.memory.deliveryTarget;
                    this.setState(CreepBase.STATE_IDLE);
                } else {
                    // –ï—â–µ –µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è, –Ω–æ —Ü–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–Ω–∞. –ò—â–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å.
                    delete this.memory.target;
                    this.setState(CreepBase.STATE_IDLE);
                }
            } else if (transferResult === ERR_FULL) {
                 // –¶–µ–ª—å –ø–æ–ª–Ω–∞, –∏—â–µ–º –¥—Ä—É–≥—É—é
                 console.log(`Harvester ${this.creep.name}: Delivery target ${target.id} is full. Finding new target.`);
                 delete this.memory.target;
                 delete this.memory.deliveryTarget;
                 this.setState(CreepBase.STATE_IDLE);
            } else {
                 console.log(`Harvester ${this.creep.name}: Transfer failed with code ${transferResult}`);
                 this.setState(CreepBase.STATE_IDLE);
            }
        } else {
            // –ö–æ–ø–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
             const harvestResult = this.creep.harvest(target);
             if (harvestResult === ERR_NOT_IN_RANGE) {
                 this.setState(CreepBase.STATE_MOVING);
                 this.handleMovingState(); // –ò–¥–µ–º –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É
             } else if (harvestResult === OK) {
                 this.creep.say?.('‚õèÔ∏è Harvest!');
                 // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–ø–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ checkAndDepositEnergy –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–∫–∞.
             } else if (harvestResult === ERR_NOT_ENOUGH_RESOURCES) {
                 // –ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Å—è–∫
                 console.log(`Harvester ${this.creep.name}: Source ${target.id} depleted. Finding new source.`);
                 delete this.memory.target;
                 delete this.memory.sourceTarget;
                 this.setState(CreepBase.STATE_IDLE);
             } else if (harvestResult === ERR_TIRED) {
                 // –ö—Ä–∏–ø —É—Å—Ç–∞–ª (–º–∞–ª–æ MOVE —á–∞—Å—Ç–µ–π?)
                 this.creep.say?.('üò© Tired');
             } else {
                 console.log(`Harvester ${this.creep.name}: Harvest failed with code ${harvestResult}`);
                 this.setState(CreepBase.STATE_IDLE);
             }
        }
    }

    // –ò—â–µ—Ç, –ö–£–î–ê –æ—Ç–Ω–µ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–∏—é (–ø–æ—Ö–æ–∂–µ –Ω–∞ Carrier, –Ω–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã)
    findDeliveryTarget() {
         // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ë–ª–∏–∂–∞–π—à–∏–π —Å–ø–∞–≤–Ω, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        let target = this.findClosestTarget(FIND_STRUCTURES, {
            filter: (structure) => {
                return (structure.structureType === STRUCTURE_EXTENSION ||
                        structure.structureType === STRUCTURE_SPAWN ||
                        structure.structureType === STRUCTURE_CONTAINER) && // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                       structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;
            }
        });

        // –ï—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç –Ω–∏—á–µ–≥–æ, –Ω–µ—Å–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (!target) {
             const room = this.gameState.getRooms()[this.creep.pos.roomName];
             if(room && room.storage && room.storage.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {
                 target = this.gameState.getObjectById(room.storage.id);
             }
        }
         // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±—Ä–æ—Å –Ω–∞ –∑–µ–º–ª—é, –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ–∫—É–¥–∞ –Ω–µ—Å—Ç–∏
         // if (!target) { creep.drop(RESOURCE_ENERGY); }

        return target;
    }

    // handleMovingState –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ CreepBase
}

module.exports = Harvester;